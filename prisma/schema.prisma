generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id           String                @id @default(cuid())
  primary_login     String                @unique
  email             String?               @unique
  phone_e164        String?               @unique
  password_hash     String
  roles             String[]
  phone_verified_at DateTime?
  created_at        DateTime              @default(now())
  last_login_at     DateTime?
  is_active         Boolean               @default(true)
  audit_logs        AuditLog[]
  documents         Document[]
  representatives   GroupRepresentative[]
  password_resets   PasswordReset[]
  relief_groups     ReliefGroup[]
  reviewed_groups   ReliefGroup[]         @relation("reviewed_by")
  sessions          Session[]
  created_alerts    Alert[]               @relation("alert_created_by")
  updated_alerts    Alert[]               @relation("alert_updated_by")

  @@map("users")
}

model Session {
  session_id         String    @id @default(cuid())
  user_id            String
  refresh_token_hash String
  device_fingerprint String?
  ip                 String?
  user_agent         String?
  expires_at         DateTime
  revoked_at         DateTime?
  created_at         DateTime  @default(now())
  user               User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("sessions")
}

model PasswordReset {
  user_id    String
  token_hash String    @id
  expires_at DateTime
  used_at    DateTime?
  created_at DateTime  @default(now())
  user       User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("password_resets")
}

model ReliefGroup {
  group_id            String                @id @default(cuid())
  group_name          String
  org_type            OrgType
  registration_number String?
  home_district_code  String?
  home_tehsil_code    String?
  home_village_code   String?
  home_lat            Float?
  home_lon            Float?
  contact_email       String?
  contact_phone_e164  String
  intended_operations String[]
  service_area        Json?
  status              GroupStatus           @default(submitted)
  created_by_user_id  String
  reviewed_by_user_id String?
  reviewed_at         DateTime?
  review_notes        String?
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  audit_logs          AuditLog[]
  documents           Document[]
  representatives     GroupRepresentative[]
  created_by_user     User                  @relation(fields: [created_by_user_id], references: [user_id])
  reviewed_by_user    User?                 @relation(fields: [reviewed_by_user_id], references: [user_id], name: "reviewed_by")
  home_district       District?             @relation(fields: [home_district_code], references: [district_code])
  home_tehsil         Tehsil?               @relation(fields: [home_tehsil_code], references: [tehsil_code])
  home_village        Village?              @relation(fields: [home_village_code], references: [village_code])

  @@map("relief_groups")
}

model GroupRepresentative {
  group_id        String
  user_id         String
  rep_name        String
  rep_phone_e164  String
  otp_verified_at DateTime?
  created_at      DateTime    @default(now())
  group           ReliefGroup @relation(fields: [group_id], references: [group_id], onDelete: Cascade)
  user            User        @relation(fields: [user_id], references: [user_id])

  @@unique([group_id, user_id])
  @@map("group_representatives")
}

model Document {
  doc_id     String      @id @default(cuid())
  group_id   String
  user_id    String
  type       DocType
  file_url   String
  checksum   String
  size_bytes Int
  created_at DateTime    @default(now())
  group      ReliefGroup @relation(fields: [group_id], references: [group_id], onDelete: Cascade)
  user       User        @relation(fields: [user_id], references: [user_id])

  @@map("documents")
}

model OTPRequest {
  id         String    @id @default(cuid())
  phone_e164 String
  otp_hash   String
  channel    String
  expires_at DateTime
  used_at    DateTime?
  created_at DateTime  @default(now())

  @@map("otp_requests")
}

model AuditLog {
  log_id              String       @id @default(cuid())
  actor_user_id       String?
  action              String
  target_type         String?
  target_id           String?
  metadata            Json?
  created_at          DateTime     @default(now())
  relief_group_id     String?
  actor               User?        @relation(fields: [actor_user_id], references: [user_id])
  relief_group        ReliefGroup? @relation(fields: [relief_group_id], references: [group_id])

  @@map("audit_logs")
}

enum OrgType {
  government
  ngo
  independent
}

enum GroupStatus {
  submitted
  pending_review
  verified
  rejected
  needs_more_info
}

// --- Location backbone (revenue chain) ---
model State {
  state_code String @id
  state_name String
  districts  District[]
  alerts     Alert[]
  @@map("states")
}

model District {
  district_code String @id
  district_name String
  state_code    String
  state         State   @relation(fields: [state_code], references: [state_code], onDelete: Restrict)
  tehsils       Tehsil[]
  villages      Village[] // convenience backref for queries
  relief_groups ReliefGroup[]
  alerts        Alert[]
  @@index([state_code])
  @@index([district_name])
  @@map("districts")
}

model Tehsil {
  tehsil_code   String @id
  tehsil_name   String
  district_code String
  district      District @relation(fields: [district_code], references: [district_code], onDelete: Restrict)
  villages      Village[]
  relief_groups ReliefGroup[]
  alerts        Alert[]
  @@index([district_code])
  @@index([tehsil_name])
  @@map("tehsils")
}

model Village {
  village_code  String @id
  village_name  String
  tehsil_code   String
  district_code String
  tehsil        Tehsil   @relation(fields: [tehsil_code], references: [tehsil_code], onDelete: Restrict)
  district      District @relation(fields: [district_code], references: [district_code], onDelete: Restrict)
  relief_groups ReliefGroup[]
  alerts        Alert[]
  // Optional future enrichment
  lat           Float?   // centroid later
  lon           Float?
  @@index([tehsil_code])
  @@index([district_code])
  @@index([village_name])
  @@map("villages")
}

model AlertCategory {
  category_id   String @id @default(cuid())
  name          String @unique
  description   String?
  is_active     Boolean @default(true)
  order_index   Int @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  statuses      AlertStatus[]
  alerts        Alert[]

  @@map("alert_categories")
}

model AlertStatus {
  status_id     String @id @default(cuid())
  category_id   String
  name          String
  value         String // The actual status value (e.g., "Inactive", "Monitoring")
  color         String // Color code for UI display (e.g., "#FF0000", "red-500")
  order_index   Int @default(0)
  is_active     Boolean @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  category      AlertCategory @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
  alerts        Alert[]

  @@unique([category_id, name])
  @@unique([category_id, value])
  @@map("alert_statuses")
}

model Alert {
  alert_id        String @id @default(cuid())
  category_id     String
  status_id       String
  location_type   AlertLocationType

  // Location references (one of these will be set based on location_type)
  state_code      String?
  district_code   String?
  tehsil_code     String?
  village_code    String?

  // Optional notes and metadata
  notes           String?
  severity        AlertSeverity @default(info)
  is_active       Boolean @default(true)
  created_by_id   String
  updated_by_id   String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  category        AlertCategory @relation(fields: [category_id], references: [category_id])
  status          AlertStatus @relation(fields: [status_id], references: [status_id])
  created_by      User @relation("alert_created_by", fields: [created_by_id], references: [user_id])
  updated_by      User? @relation("alert_updated_by", fields: [updated_by_id], references: [user_id])

  // Location relations (optional based on location_type)
  state           State? @relation(fields: [state_code], references: [state_code])
  district        District? @relation(fields: [district_code], references: [district_code])
  tehsil          Tehsil? @relation(fields: [tehsil_code], references: [tehsil_code])
  village         Village? @relation(fields: [village_code], references: [village_code])

  @@map("alerts")
}

enum AlertLocationType {
  state
  district
  tehsil
  village
}

enum AlertSeverity {
  info
  warning
  critical
}

enum DocType {
  rep_id
  org_cert
}

model Service {
  service_id     String   @id @default(cuid())
  broad_category String
  subcategory    String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("services")
  @@unique([broad_category, subcategory])
}
